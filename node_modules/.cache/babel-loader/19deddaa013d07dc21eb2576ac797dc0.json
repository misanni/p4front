{"ast":null,"code":"import axios from \"axios\"; // managing authentication based action types\n\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"https://p4backend-production.up.railway.app/api/auth/user\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // login user\n\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(\"https://p4backend-production.up.railway.app/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Register user\n\nexport const register = ({\n  username,\n  password,\n  email\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post(\"https://p4backend-production.up.railway.app/api/auth/register\", body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // logout user\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post(\"https://p4backend-production.up.railway.app/api/auth/logout\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  });\n}; // setup config with token\n\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/marysanni/Downloads/FullStack_Blog_App_with_React_Redux_and_Django-master/frontend/src/actions/auth.js"],"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","login","username","password","config","headers","body","JSON","stringify","post","register","email","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\n// managing authentication based action types\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from \"./types\";\n\n// check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"https://p4backend-production.up.railway.app/api/auth/user\", tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    });\n};\n\n// login user\nexport const login = (username, password) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, password });\n\n  axios\n    .post(\"https://p4backend-production.up.railway.app/api/auth/login\", body, config)\n    .then((res) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    });\n};\n\n// Register user\nexport const register = ({ username, password, email }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, email, password });\n\n  axios\n    .post(\"https://p4backend-production.up.railway.app/api/auth/register\", body, config)\n    .then((res) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    });\n};\n\n// logout user\nexport const logout = () => (dispatch, getState) => {\n  axios\n    .post(\"https://p4backend-production.up.railway.app/api/auth/logout\", null, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      });\n    });\n};\n\n// setup config with token\nexport const tokenConfig = (getState) => {\n  const token = getState().auth.token;\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}