{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marysanni/Downloads/FullStack_Blog_App_with_React_Redux_and_Django-master/frontend/src/components/common/PrivateRoute.js\";\n// Manages --> Will Redirect the user back to login page if not already logged in.\nimport React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\"; // Applying Private Route check on our components\n// here component will manage our two components of App.js (Blogs and Forms) followed by auth\n// rest props (remaining properties)\n\nconst PrivateRoute = ({\n  component: Component,\n  auth,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n  render: props => {\n    if (!auth.isAuthenticated) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 16\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 16\n      }, this);\n    }\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n\n_c = PrivateRoute;\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/marysanni/Downloads/FullStack_Blog_App_with_React_Redux_and_Django-master/frontend/src/components/common/PrivateRoute.js"],"names":["React","Redirect","Route","connect","PrivateRoute","component","Component","auth","rest","props","isAuthenticated","mapStateToProps","state"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,IAAxB;AAA8B,KAAGC;AAAjC,CAAD,kBACnB,QAAC,KAAD,OACMA,IADN;AAEE,EAAA,MAAM,EAAGC,KAAD,IAAW;AACjB,QAAI,CAACF,IAAI,CAACG,eAAV,EAA2B;AACzB,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,0BAAO,QAAC,SAAD,OAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF;AARH;AAAA;AAAA;AAAA;AAAA,QADF;;KAAML,Y;;AAaN,MAAMO,eAAe,GAAIC,KAAD,KAAY;AAClCL,EAAAA,IAAI,EAAEK,KAAK,CAACL;AADsB,CAAZ,CAAxB;;AAIA,eAAeJ,OAAO,CAACQ,eAAD,CAAP,CAAyBP,YAAzB,CAAf","sourcesContent":["// Manages --> Will Redirect the user back to login page if not already logged in.\n\nimport React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\n// Applying Private Route check on our components\n// here component will manage our two components of App.js (Blogs and Forms) followed by auth\n// rest props (remaining properties)\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) => {\n      if (!auth.isAuthenticated) {\n        return <Redirect to=\"/login\" />;\n      } else {\n        return <Component {...props} />;\n      }\n    }}\n  />\n);\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n"]},"metadata":{},"sourceType":"module"}